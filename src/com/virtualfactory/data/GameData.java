package com.virtualfactory.data;import de.lessvoid.nifty.controls.Label;import com.virtualfactory.app.GameEngine;import com.virtualfactory.data.D_Game;import com.virtualfactory.data.D_Machine;import com.virtualfactory.data.D_Operation;import com.virtualfactory.data.D_Operator;import com.virtualfactory.data.D_Order;import com.virtualfactory.data.D_Part;import com.virtualfactory.data.D_Player;import com.virtualfactory.data.D_Purchase;import com.virtualfactory.data.D_Ship;import com.virtualfactory.data.D_Skill;import com.virtualfactory.data.D_Station;import com.virtualfactory.data.D_Supplier;import com.virtualfactory.data.D_Terrain;import com.virtualfactory.data.D_TransportStore;import com.virtualfactory.entity.E_Activity;import com.virtualfactory.entity.E_Game;import com.virtualfactory.entity.E_Machine;import com.virtualfactory.entity.E_Operation;import com.virtualfactory.entity.E_Operator;import com.virtualfactory.entity.E_Order;import com.virtualfactory.entity.E_Part;import com.virtualfactory.entity.E_Player;import com.virtualfactory.entity.E_PlayerLog;import com.virtualfactory.entity.E_Purchase;import com.virtualfactory.entity.E_Ship;import com.virtualfactory.entity.E_Skill;import com.virtualfactory.entity.E_Station;import com.virtualfactory.entity.E_Supplier;import com.virtualfactory.entity.E_Terrain;import com.virtualfactory.entity.E_TransportStore;import com.virtualfactory.menu.components.InitialMenuController;import com.virtualfactory.gui.ProgressBarController;import com.virtualfactory.layer.components.ActivityControl;import com.virtualfactory.layer.components.CharactersControl;import com.virtualfactory.layer.components.DashboardControl;import com.virtualfactory.layer.components.GameLogControl;import com.virtualfactory.layer.components.MachineControl;import com.virtualfactory.layer.components.OperatorControl;import com.virtualfactory.layer.components.OrderControl;import com.virtualfactory.layer.components.OverallControl;import com.virtualfactory.layer.components.PartControl;import com.virtualfactory.layer.components.StorageStationControl;import com.virtualfactory.threads.DataLoading;import com.virtualfactory.threads.ExecuteInRemoteDatabase;import com.virtualfactory.threads.UserDataLoading;import com.virtualfactory.utils.GameType;import com.virtualfactory.utils.MachineCategory;import com.virtualfactory.utils.MessageType;import com.virtualfactory.utils.Messages;import com.virtualfactory.utils.ObjectState;import com.virtualfactory.utils.OperatorCategory;import com.virtualfactory.utils.OrderStates;import com.virtualfactory.utils.Owner;import com.virtualfactory.utils.Pair;import com.virtualfactory.utils.Params;import com.virtualfactory.utils.Sounds;import com.virtualfactory.utils.StationType;import com.virtualfactory.utils.Status;import com.virtualfactory.utils.TypeActivity;import com.virtualfactory.utils.TypeElements;import com.virtualfactory.utils.Utils;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.Map;import java.util.Random;/** * Game data for Yaguez Virtual Factory. * @author David Bengoa * [Note: Cleaned and updated by Abner Coimbre. Uses Java 7 features]  */public class GameData {        private static GameData instance;        private Map<Integer, E_Skill> mapGameSkill;    private Map<Integer, E_Supplier> mapGameSupplier;    private Map<Integer, E_Operator> mapGameOperator;    private Map<Integer, E_Station> mapGameStation;    private Map<Integer, E_Part> mapGamePart;    private Map<Integer, E_Machine> mapGameMachine;    private Map<Integer, E_Operator> mapUserOperator;    private Map<Integer, E_Operator> mapUserOperatorCarrier;    private Map<Integer, E_Operator> mapUserOperatorAssembler;    private Map<Integer, E_Operator> mapUserOperatorVersatile;    private Map<Integer, E_Operator> mapUserOperatorNone;    private int userOperator_Carrier_Act;    private int userOperator_Carrier_Inact;    private int userOperator_Assembler_Act;    private int userOperator_Assembler_Inact;    private int userOperator_Versatile_Act;    private int userOperator_Versatile_Inact;    private Map<Integer, E_Station> mapUserStation;    private Map<Integer, E_Station> mapUserStorageStation;    private Map<Integer, E_Part> mapUserPart;    private Map<Integer, E_Machine> mapUserMachine;    private Map<Integer, E_Machine> mapUserMachineByOperation;    private Map<Integer, E_Machine> mapUserMachineByTransport;    private Map<Integer, E_Machine> mapUserMachinePendingToMoveToMachineZone;    private int userMachine_Act;    private int userEquipment_Act;    private int userMachine_Available;    private int userMachine_Broken;    private int userMachine_Busy;    private int userMachine_Idle;    private int userEquipment_Available;    private int userEquipment_Broken;    private int userEquipment_Busy;    private int userEquipment_Idle;    private E_Station userStation_StaffZone = null;    private E_Station userStation_MachineZone = null;    private Map<Integer, E_Operation> mapOperation;    private Map<Integer, E_Purchase> mapPurchase;    private Map<Integer, E_Ship> mapShip;    private Map<Integer, E_TransportStore> mapTransport;    private Map<Integer, E_TransportStore> mapStore;    private Map<Integer, E_Order> mapOrder;    private E_Terrain mapTerrain;    private E_Player currentPlayer = null;    private E_Game currentGame = null;    private double previousTimeGame;    private double previousRefreshTimeGame = 0;    private GameEngine gameEngine;    private int currentOrderIndex = 0;    private ArrayList<E_Order> arrOrders = null;    private int nextOrderDueDate = Integer.MAX_VALUE;    private int nextPurchaseDueDate = Integer.MAX_VALUE;    private int newNextOrderDueDate = -1;        private double totalOperatorsHire = 0;    private double totalOperatorsFire = 0;    private double totalMachinesPurchase = 0;    private double totalMachinesSale = 0;    private double totalMachinePreventiveMaintenance = 0;    private double totalEquipmentPurchase = 0;    private double totalEquipmentSale = 0;    private double totalEquipmentPreventiveMaintenance = 0;    private int initialTimeWithFactor = 0;    private int currentPurchaseId = -1;    public int getCurrentPurchaseId() {        return currentPurchaseId;    }    public void setCurrentPurchaseId(int currentPurchaseId) {        this.currentPurchaseId = currentPurchaseId;    }//    private int idPlayerLog = -1;//    private int idPlayerLogRemote = -1;    private E_PlayerLog tempPlayerLog;    private GameData() {}    public static synchronized GameData getInstance(){        if (instance == null) {            instance = new GameData();        }        return instance;    }    public void logoutPlayer(){        if (currentPlayer != null) {            new D_Player().LogOut(currentPlayer.getIdPlayer());        }    }    public ArrayList<E_Game> loadGamesOfAPlayer(int idPlayer){        //return new D_Game().SelectGames_OfAPlayer(idPlayer);        return new D_Game().SQLite_SelectGames_OfPlayer(idPlayer);    }    public ArrayList<E_Game> loadGamesByType(GameType gameType){//        return new D_Game().SelectGames_ByType(gameType);        return new D_Game().SQLite_SelectGames_ByType(gameType);    }    public boolean updatePlayerProfile(E_Player updatePlayer){        new D_Player().UpdateSQLite(updatePlayer);        new D_Player().Update(updatePlayer);        return true;    }    public void updatePlayerLog(){        D_Player dPlayer = new D_Player();        if (tempPlayerLog != null && currentPlayer != null){            long timeStamp = System.currentTimeMillis()/1000;            tempPlayerLog.setLogoutTime((int)timeStamp);            if (tempPlayerLog.getIdPlayerLog() != -1){                if (tempPlayerLog.getIdPlayerLogRemote() == -1){//insert Remote Database                    dPlayer.PlayerLog_Insert(tempPlayerLog, false);                }else{ //update Remote Database                    dPlayer.PlayerLog_Update(tempPlayerLog, false);                }                dPlayer.PlayerLog_Update(tempPlayerLog, Params.isSQLiteDatabase);            }        }    }    public boolean createGame(E_Game tempGame){        currentPurchaseId = -1;        nextPurchaseDueDate = Integer.MAX_VALUE;        D_Game dGame = new D_Game();        dGame.AddNewGameAttempt(tempGame.getIdGame(),this.currentPlayer.getIdPlayer());        currentGame = null;        currentGame = dGame.SQLite_SelectGames_OneGame(tempGame.getIdGame(),this.currentPlayer.getIdPlayer());        currentGame.setCurrentMonth(Calendar.getInstance().get(Calendar.MONTH)+1);//1        currentGame.setCurrentDay(Calendar.getInstance().get(Calendar.DAY_OF_MONTH));//1        currentGame.setCurrentHour(0);        currentGame.setCurrentMinute(0);        currentGame.setTimeFactor(1);        currentGame.setCurrentTime(0);        currentGame.setDescription(tempGame.getDescription());        initialTimeWithFactor = getCurrentTimeWithFactor();        boolean result = manageGame(tempGame.getIdGame());        // updateRandomValues(false); //false to switch off        updatePlayerLog();        tempPlayerLog = new E_PlayerLog();        tempPlayerLog.setIdPlayer(currentPlayer.getIdPlayer());        tempPlayerLog.setGameLevel(currentGame.getGameName());        tempPlayerLog.setLoginTime((int)(System.currentTimeMillis()/1000));        tempPlayerLog.setIdPlayerLogRemote(-1);        new D_Player().PlayerLog_Insert(tempPlayerLog, Params.isSQLiteDatabase);        return result;    }    public boolean loadGame(E_Game gameSelected){        this.currentGame = gameSelected;        return manageGame(this.currentGame.getIdGame());    }    public void setCurrentMoney(double money){        currentGame.setCurrentMoney((money*100.0)/100);    }    public double getCurrentMoney(){        return currentGame.getCurrentMoney();    }    public E_Game getCurrentGame() {        return currentGame;    }    public void setCurrentGame(E_Game currentGame) {        this.currentGame = currentGame;    }    public String getCurrentTimeGame(){        updateCurrentTimeGame();        //return "Month:" + currentGame.getCurrentMonth() + " - Day:" + currentGame.getCurrentDay() + " - " + uFormat2Char(currentGame.getCurrentHour()) + ":" + uFormat2Char(currentGame.getCurrentMinute());        return Utils.convertToMonth_long(currentGame.getCurrentMonth()) + " " + currentGame.getCurrentDay() + ", " + uFormat2Char(currentGame.getCurrentHour()) + ":" + uFormat2Char(currentGame.getCurrentMinute());    }    private String uFormat2Char(int value){        if (value < 10) {            return "0" + value;        }        else {            return String.valueOf(value);        }    }    private void updateCurrentTimeGame(){        //complete Minute,Hour,Day,Month of the current game        //between initialTime and currentTime        //and the currentTimeGame in the GameObject in case this is SavedGame        //currentTimeGame = System.currentTimeMillis();        currentGame.setTimeFactor(gameEngine.getGeneralScreenController().getTimeFactor());        if (currentGame.getCurrentTime() - previousTimeGame > currentGame.getTimeFactor()&& this.gameEngine.getGeneralScreenController().getPauseStatus())  //1000 = 1second        {            if (nextOrderDueDate != Integer.MAX_VALUE){                nextOrderDueDate = nextOrderDueDate - 1;                gameEngine.getGeneralScreenController().setNextDueDate(getNextOrderDueDate());            }            if (nextPurchaseDueDate == 0){                nextPurchaseDueDate = Integer.MAX_VALUE;                gameEngine.getGeneralScreenController().setNextPurchaseDueDate("-");                currentPurchaseId = -1;            } else            if (nextPurchaseDueDate != Integer.MAX_VALUE){                nextPurchaseDueDate = nextPurchaseDueDate - 1;                gameEngine.getGeneralScreenController().setNextPurchaseDueDate(convertTimeUnistToHourMinute(nextPurchaseDueDate));            }            previousTimeGame = previousTimeGame + (gameEngine.getGeneralScreenController().getTimeFactor());            if (currentGame.getCurrentMinute() == 59){                currentGame.setCurrentMinute(0);                //update statistics per hour//                gameEngine.getGeneralScreenController().tempUpdateStatistics();                if (currentGame.getCurrentHour() == Params.numberWorkHoursPerDay - 1){                    currentGame.setCurrentHour(0);                    if (currentGame.getCurrentDay() == Params.numberWorkDaysPerMonth - 1){                        currentGame.setCurrentDay(1);                        currentGame.setCurrentMonth(currentGame.getCurrentMonth() + 1);                    }else{                        currentGame.setCurrentDay(currentGame.getCurrentDay() + 1);                    }                }else{                    currentGame.setCurrentHour(currentGame.getCurrentHour() + 1);                }            }else{                currentGame.setCurrentMinute(currentGame.getCurrentMinute() + 1);            }        }//        if (currentGame.getCurrentTime() - previousRefreshTimeGame > currentGame.getTimeFactor() * Params.timeUnitsToRefresh){//            updateControlsWindows();//            previousRefreshTimeGame += currentGame.getTimeFactor() * Params.timeUnitsToRefresh;//        }    }        public int getCurrentTimeWithFactor(){        int tempTime = currentGame.getCurrentMinute() + currentGame.getCurrentHour()*60 +                 currentGame.getCurrentDay()*Params.numberWorkHoursPerDay*60                + currentGame.getCurrentMonth()*Params.numberWorkDaysPerMonth*Params.numberWorkHoursPerDay*60;        return tempTime;    }    public int getInitialTimeWithFactor() {        return initialTimeWithFactor;    }        public String convertTimeUnitsToString(int tempTime){        int tempMin = tempTime%60;        int tempHour = (tempTime/60)%Params.numberWorkHoursPerDay;        int tempDay = ((tempTime/60)/Params.numberWorkHoursPerDay)%Params.numberWorkDaysPerMonth;        int tempMonth = ((tempTime/60)/Params.numberWorkHoursPerDay)/Params.numberWorkDaysPerMonth;        //return "M:" + tempMonth + ",D:" + tempDay + "-" + tempHour + ":" + (tempMin < 10 ? ("0" + tempMin) : tempMin);        if (tempMonth == 0 && tempDay == 0) {            return uFormat2Char(tempHour) + ":" + uFormat2Char(tempMin);        }        else        if (tempMonth == 0) {            return tempDay + ", " + uFormat2Char(tempHour) + ":" + uFormat2Char(tempMin);        }        else {            return Utils.convertToMonth_short(tempMonth) + " " + tempDay + ", " + uFormat2Char(tempHour) + ":" + uFormat2Char(tempMin);        }    }        public String convertTimeUnistToHourMinute(int tempTime){        int tempMin = tempTime%60;        int tempHour = tempTime/60;        return uFormat2Char(tempHour) + ":" + uFormat2Char(tempMin);    }        public void updateControlsWindows(){        if (!this.gameEngine.getGeneralScreenController().getPauseStatus()) {            return;        }        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winMC_Element").getControl(MachineControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winMC_Element").getControl(MachineControl.class).updateData();        }        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winOC_Element").getControl(OperatorControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winOC_Element").getControl(OperatorControl.class).updateData();        }            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winOvC_Element").getControl(OverallControl.class).updateData();        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winPC_Element").getControl(PartControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winPC_Element").getControl(PartControl.class).updateData();        }//        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winSC_Element").getControl(StationControl.class).isIsVisible())//            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winSC_Element").getControl(StationControl.class).updateData();        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winAC_Element").getControl(ActivityControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winAC_Element").getControl(ActivityControl.class).updateData();        }        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winChC_Element").getControl(CharactersControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winChC_Element").getControl(CharactersControl.class).updateData();        }        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winSSC_Element").getControl(StorageStationControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winSSC_Element").getControl(StorageStationControl.class).updateData();        }        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winDashboard_Element").getControl(DashboardControl.class).isIsVisible()) {            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winDashboard_Element").getControl(DashboardControl.class).updateData();        }    }        public boolean createPlayer(E_Player tempPlayer){        long timeStamp = System.currentTimeMillis()/1000;        tempPlayer.setLastLoginTime((int)timeStamp);        int idNewPlayer = new D_Player().Insert(tempPlayer);        if (idNewPlayer == -1) {            return false;        }        else{            this.currentPlayer = tempPlayer;            this.currentPlayer.setIdPlayer(idNewPlayer);            new D_Player().InsertSQLite(currentPlayer);//add NewPlayer to SQLite            D_Game tempGameData = new D_Game();            ArrayList<E_Game> tempArrGames = tempGameData.SQLite_SelectGames_ByType(GameType.CPU);            ExecuteInRemoteDatabase remoteDatabase;            for (E_Game tempGame : tempArrGames){                tempGame.setIdPlayer(idNewPlayer);                tempGame.setGameType(GameType.USER);                tempGame.setCurrentMoney(0);                tempGame.setDateTime((int)timeStamp);                tempGameData.SQLite_Insert(tempGame);                                remoteDatabase = new ExecuteInRemoteDatabase();                remoteDatabase.setGame(tempGame);                remoteDatabase.setAction("Game_Insert");                remoteDatabase.start();            }            return true;        }    }        public boolean validateEmailNewPlayer(String tempEmail){        return new D_Player().ValidateEmail(tempEmail);    }        public E_Player getPlayerByEmail(String tempEmail){        return new D_Player().SelectPlayerByEmail(tempEmail);    }        public int getNoUserOperator(Status statusOperator){        int noOperatorSelected = 0;        for(E_Operator workerLocal : getMapUserOperator().values()){            if (workerLocal.getStatus().equals(statusOperator) && workerLocal.getState().equals(ObjectState.Active)) {                noOperatorSelected++;            }        }        return noOperatorSelected;    }        private boolean manageGame(int idGame){        boolean result = false;        getGameLogic(idGame);        getGameUserData(idGame);        this.previousTimeGame = currentGame.getCurrentTime();        this.previousRefreshTimeGame = currentGame.getCurrentTime();        mapTerrain = null;        mapTerrain = new D_Terrain().Select(currentGame.getIdTerrain(), Params.isSQLiteDatabase);        return result;    }        public void updateWonGame(){        long timeStamp = System.currentTimeMillis()/1000;        currentGame.setDateTime((int)timeStamp);        D_Game dGame = new D_Game();        dGame.SQLite_Update(currentGame);        dGame.Update(currentGame);        dGame.updateWonGame(currentGame);        dGame.updateGameBestScore(currentGame);    }        public void updateFailedGame(){        new D_Game().updateFailedGame(currentGame);    }    public ArrayList<E_Activity> getActivities_OrderByPriority(){        Comparator<E_Activity> comparator = new Comparator<E_Activity>(){                    @Override                    public int compare(E_Activity a,E_Activity b)                    {                      if (a.getPriorityQueue() > b.getPriorityQueue())                      { return  1; }                                            else if (a.getPriorityQueue() < b.getPriorityQueue())                      { return -1; }                      else                      { return  0; }                    }                };        ArrayList<E_Activity> arrListSorted = new ArrayList<>();        arrListSorted.addAll(mapOperation.values());        arrListSorted.addAll(mapPurchase.values());        arrListSorted.addAll(mapShip.values());        arrListSorted.addAll(mapTransport.values());        arrListSorted.addAll(mapStore.values());        Collections.sort(arrListSorted, comparator);        return arrListSorted;    }        private void getGameLogic(int idGame){        mapOperation = new D_Operation().Select(idGame, Params.isSQLiteDatabase);        mapPurchase = new D_Purchase().Select(idGame, Params.isSQLiteDatabase);        mapShip = new D_Ship().Select(idGame, Params.isSQLiteDatabase);        mapTransport = new D_TransportStore().Select(idGame, Params.isSQLiteDatabase);        mapStore = new HashMap<>();        mapOrder = new D_Order().Select(idGame, Params.isSQLiteDatabase);        boolean anyChange = true;        while (anyChange){            if (mapTransport.isEmpty()) {                anyChange = false;            }            for (E_TransportStore tr : mapTransport.values()){                if (tr.getTypeActivity() == TypeActivity.Store){                    mapStore.put(tr.getIdActivity(), tr);                    mapTransport.remove(tr.getIdActivity());                    anyChange = true;                    break;                }else{                    anyChange = false;                }            }        }    }        private void getGameUserData(int idGame){        mapGameSkill = new D_Skill().Select(idGame, Params.isSQLiteDatabase);        mapGameSupplier = new D_Supplier().Select(idGame, Params.isSQLiteDatabase);        Map<Integer, E_Operator> operatorTemp = new D_Operator().Select(idGame, currentGame, gameEngine, Params.isSQLiteDatabase);        Map<Integer, E_Station> stationTemp = new D_Station().Select(idGame, currentGame, gameEngine, Params.isSQLiteDatabase);        Map<Integer, E_Part> partTemp = new D_Part().Select(idGame, Params.isSQLiteDatabase);        Map<Integer, E_Machine> machineTemp = new D_Machine().Select(idGame, currentGame, gameEngine, Params.isSQLiteDatabase);        mapGameOperator = new HashMap<>();        mapGameStation = new HashMap<>();        mapGamePart = new HashMap<>();        mapGameMachine = new HashMap<>();                totalOperatorsHire = 0;        totalOperatorsFire = 0;        totalMachinesPurchase = 0;        totalMachinesSale = 0;        totalMachinePreventiveMaintenance = 0;        totalEquipmentPurchase = 0;        totalEquipmentSale = 0;        totalEquipmentPreventiveMaintenance = 0;                userStation_MachineZone = null;        userStation_StaffZone = null;        mapUserOperator = new HashMap<>();        mapUserStation = new HashMap<>();        mapUserStorageStation = new HashMap<>();        mapUserPart = new HashMap<>();        mapUserMachine = new HashMap<>();        mapUserMachineByOperation = new HashMap<>();        mapUserMachineByTransport = new HashMap<>();                mapUserOperatorAssembler = new HashMap<>();        mapUserOperatorCarrier = new HashMap<>();        mapUserOperatorVersatile = new HashMap<>();        mapUserOperatorNone = new HashMap<>();        mapUserMachinePendingToMoveToMachineZone = new HashMap<>();                for (E_Operator op : operatorTemp.values()){            if (op.getOwner() == Owner.Game) {                mapGameOperator.put(op.getIdOperator(), op);            }            else {                mapUserOperator.put(op.getIdOperator(), op);            }        }        for (E_Station s : stationTemp.values()){            if (s.getOwner() == Owner.Game) {                mapGameStation.put(s.getIdStation(), s);            }            else{                mapUserStation.put(s.getIdStation(), s);                if (s.getStationType().equals(StationType.StorageFG) || s.getStationType().equals(StationType.StorageIG) || s.getStationType().equals(StationType.StorageRM)){                    mapUserStorageStation.put(s.getIdStation(), s);                }            }        }        for (E_Part p : partTemp.values()){            if (p.getOwner() == Owner.Game) {                mapGamePart.put(p.getIdPart(), p);            }            else {                mapUserPart.put(p.getIdPart(), p);            }        }        for (E_Machine m : machineTemp.values()){            if (m.getOwner() == Owner.Game) {                mapGameMachine.put(m.getIdMachine(), m);            }            else{                mapUserMachine.put(m.getIdMachine(), m);                if (m.getMachineCategory().equals(MachineCategory.Operation)) {                    mapUserMachineByOperation.put(m.getIdMachine(), m);                }                else                if (m.getMachineCategory().equals(MachineCategory.Transport)) {                    mapUserMachineByTransport.put(m.getIdMachine(), m);                }                }                        }    }        public void manageMachineStates(){        //updated status, and this method is ONLY called each UNIT_TIME        Iterable<E_Machine> machines = gameEngine.getGameData().getMapUserMachine().values();        for (E_Machine machine : machines){            if (machine.getStatus().equals(Status.Busy)){                if (machine.getCurrentWorkingTime() >= machine.getTimeBetweenFailuresCalculated()*Params.percentageToShowWarningMachineEquipment){                    if (machine.getMachineCategory().equals(MachineCategory.Operation)) {                        GameLogControl.addMessage(MessageType.Notification, Messages.machineEquipmentWarning.replace(Messages.wildCard, "Machine").replace(Messages.wildCard2, String.valueOf(machine.getIdMachine())));                    }                    else {                        GameLogControl.addMessage(MessageType.Notification, Messages.machineEquipmentWarning.replace(Messages.wildCard, "Equipment").replace(Messages.wildCard2, String.valueOf(machine.getIdMachine())));                    }                }                if (!machine.isMovingToMachineZone()) {                    machine.setCurrentWorkingTime(machine.getCurrentWorkingTime() + 1);                }                if (machine.getCurrentWorkingTime() >= machine.getTimeBetweenFailuresCalculated()) {                    machine.setIsAlreadyBroken(true);                }                else {                    machine.setIsAlreadyBroken(false);                }            }else            if (machine.getStatus().equals(Status.Broken)){                machine.setCurrentWorkingTime(machine.getCurrentWorkingTime() + 1);                if (machine.getCurrentWorkingTime() >= 0){                    machine.setCurrentWorkingTime(0);                    machine.setStatus(Status.Idle);                    gameEngine.getGameSounds().playSound(Sounds.MachineEquipmentFixed);                    if (machine.getMachineCategory().equals(MachineCategory.Operation)) {                        GameLogControl.addMessage(MessageType.Info, Messages.machineEquipmentFixed.replace(Messages.wildCard, "Machine").replace(Messages.wildCard2, String.valueOf(machine.getIdMachine())));                    }                    else {                        GameLogControl.addMessage(MessageType.Info, Messages.machineEquipmentFixed.replace(Messages.wildCard, "Equipment").replace(Messages.wildCard2, String.valueOf(machine.getIdMachine())));                    }                }            }        }    }        //Getters    public E_Terrain getMapTerrain() {        return mapTerrain;    }    public Map<Integer, E_Machine> getMapGameMachine() {        return mapGameMachine;    }    public Map<Integer, E_Operator> getMapGameOperator() {        return mapGameOperator;    }    public Map<Integer, E_Part> getMapGamePart() {        return mapGamePart;    }    public Map<Integer, E_Skill> getMapGameSkill() {        return mapGameSkill;    }    public Map<Integer, E_Station> getMapGameStation() {        return mapGameStation;    }    public Map<Integer, E_Supplier> getMapGameSupplier() {        return mapGameSupplier;    }    public E_Activity getActivity(int idActivity){        for (E_Activity tempActivity : mapOperation.values()){            if (tempActivity.getIdActivity() == idActivity) {                return tempActivity;            }                 }        for (E_Activity tempActivity : mapPurchase.values()){            if (tempActivity.getIdActivity() == idActivity) {                return tempActivity;            }                 }        for (E_Activity tempActivity : mapShip.values()){            if (tempActivity.getIdActivity() == idActivity) {                return tempActivity;            }                 }        for (E_Activity tempActivity : mapStore.values()){            if (tempActivity.getIdActivity() == idActivity) {                return tempActivity;            }                 }        for (E_Activity tempActivity : mapTransport.values()){            if (tempActivity.getIdActivity() == idActivity) {                return tempActivity;            }                 }        return null;    }        public Map<Integer,E_Activity> getActivityByType(TypeActivity tTypeActivity){        Map<Integer, E_Activity> tempActivityByType = new HashMap<>();        if (tTypeActivity.equals(TypeActivity.Operation)){            for (E_Operation tActivity : mapOperation.values()) {                tempActivityByType.put(tActivity.getIdActivity(), tActivity);            }        }else        if (tTypeActivity.equals(TypeActivity.Transport)){            for (E_TransportStore tActivity : mapTransport.values()) {                tempActivityByType.put(tActivity.getIdActivity(), tActivity);            }        }else        if (tTypeActivity.equals(TypeActivity.Purchase)){            for (E_Purchase tActivity : mapPurchase.values()) {                tempActivityByType.put(tActivity.getIdActivity(), tActivity);            }        }        return tempActivityByType;    }    public int getNextPurchaseDueDate() {        return nextPurchaseDueDate;    }    public void setNextPurchaseDueDate(int nextPurchaseDueDate) {        this.nextPurchaseDueDate = nextPurchaseDueDate;    }    public double getTotalEquipmentPurchase() {        return totalEquipmentPurchase;    }    public void setTotalEquipmentPurchase(double totalEquipmentPurchase) {        this.totalEquipmentPurchase = totalEquipmentPurchase;    }    public double getTotalEquipmentSale() {        return totalEquipmentSale;    }    public void setTotalEquipmentSale(double totalEquipmentSale) {        this.totalEquipmentSale = totalEquipmentSale;    }    public double getTotalEquipmentPreventiveMaintenance() {        return totalEquipmentPreventiveMaintenance;    }    public void setTotalEquipmentPreventiveMaintenance(double totalEquipmentPreventiveMaintenance) {        this.totalEquipmentPreventiveMaintenance = totalEquipmentPreventiveMaintenance;    }    public double getTotalMachinePreventiveMaintenance() {        return totalMachinePreventiveMaintenance;    }    public void setTotalMachinePreventiveMaintenance(double totalMachinePreventiveMaintenance) {        this.totalMachinePreventiveMaintenance = totalMachinePreventiveMaintenance;    }        public double getTotalMachinesPurchase() {        return totalMachinesPurchase;    }    public void setTotalMachinesPurchase(double totalMachinesPurchase) {        this.totalMachinesPurchase = totalMachinesPurchase;    }    public double getTotalMachinesSale() {        return totalMachinesSale;    }    public void setTotalMachinesSale(double totalMachinesSale) {        this.totalMachinesSale = totalMachinesSale;    }    public double getTotalOperatorsFire() {        return totalOperatorsFire;    }    public void setTotalOperatorsFire(double totalOperatorsFire) {        this.totalOperatorsFire = totalOperatorsFire;    }    public double getTotalOperatorsHire() {        return totalOperatorsHire;    }    public void setTotalOperatorsHire(double totalOperatorsHire) {        this.totalOperatorsHire = totalOperatorsHire;    }    public Map<Integer, E_Order> getMapOrder() {        return mapOrder;    }    public Map<Integer, E_Operation> getMapOperation() {        return mapOperation;    }    public Map<Integer, E_Purchase> getMapPurchase() {        return mapPurchase;    }    public Map<Integer, E_Ship> getMapShip() {        return mapShip;    }    public Map<Integer, E_TransportStore> getMapStore() {        return mapStore;    }    public Map<Integer, E_TransportStore> getMapTransport() {        return mapTransport;    }    public Map<Integer, E_Machine> getMapUserMachine() {        return mapUserMachine;    }    public Map<Integer, E_Machine> getMapUserMachineByOperation() {        return mapUserMachineByOperation;    }    public Map<Integer, E_Machine> getMapUserMachineByTransport() {        return mapUserMachineByTransport;    }    public Map<Integer, E_Machine> getMapUserMachinePendingToMoveToMachineZone() {        return mapUserMachinePendingToMoveToMachineZone;    }    public Map<Integer, E_Operator> getMapUserOperator() {        return mapUserOperator;    }    public Map<Integer, E_Operator> getMapUserOperatorAssembler() {        return mapUserOperatorAssembler;    }    public Map<Integer, E_Operator> getMapUserOperatorCarrier() {        return mapUserOperatorCarrier;    }    public Map<Integer, E_Operator> getMapUserOperatorVersatile() {        return mapUserOperatorVersatile;    }    public Map<Integer, E_Operator> getMapUserOperatorNone() {        return mapUserOperatorNone;    }    public Map<Integer, E_Part> getMapUserPart() {        return mapUserPart;    }    public Map<Integer, E_Station> getMapUserStation() {        return mapUserStation;    }    public Map<Integer, E_Station> getMapUserStorageStation() {        return mapUserStorageStation;    }    public int getUserOperator_Assembler_Act() {        return userOperator_Assembler_Act;    }    public int getUserOperator_Assembler_Inact() {        return userOperator_Assembler_Inact;    }    public int getUserOperator_Carrier_Act() {        return userOperator_Carrier_Act;    }    public int getUserOperator_Carrier_Inact() {        return userOperator_Carrier_Inact;    }    public int getUserOperator_Versatile_Act() {        return userOperator_Versatile_Act;    }    public int getUserOperator_Versatile_Inact() {        return userOperator_Versatile_Inact;    }    public void updateUserOperatorCategories(){        userOperator_Carrier_Act = 0;        userOperator_Carrier_Inact = 0;        userOperator_Assembler_Act = 0;        userOperator_Assembler_Inact = 0;        userOperator_Versatile_Act = 0;        userOperator_Versatile_Inact = 0;        mapUserOperatorVersatile.clear();        mapUserOperatorCarrier.clear();        mapUserOperatorAssembler.clear();        mapUserOperatorNone.clear();        for (E_Operator tempOpe : mapUserOperator.values()){            if (tempOpe.getCategory().equals(OperatorCategory.Versatile)){                mapUserOperatorVersatile.put(tempOpe.getIdOperator(), tempOpe);                if (tempOpe.getState().equals(ObjectState.Active) && !tempOpe.activateLaterDeactivation) {                    userOperator_Versatile_Act++;                }                else {                    userOperator_Versatile_Inact++;                }            }else            if (tempOpe.getCategory().equals(OperatorCategory.Carrier)){                mapUserOperatorCarrier.put(tempOpe.getIdOperator(), tempOpe);                if (tempOpe.getState().equals(ObjectState.Active) && !tempOpe.activateLaterDeactivation) {                    userOperator_Carrier_Act++;                }                else {                    userOperator_Carrier_Inact++;                }            }else            if (tempOpe.getCategory().equals(OperatorCategory.Assembler)){                mapUserOperatorAssembler.put(tempOpe.getIdOperator(), tempOpe);                if (tempOpe.getState().equals(ObjectState.Active) && !tempOpe.activateLaterDeactivation) {                    userOperator_Assembler_Act++;                }                else {                    userOperator_Assembler_Inact++;                }            }else            if (tempOpe.getCategory().equals(OperatorCategory.None)){                mapUserOperatorNone.put(tempOpe.getIdOperator(), tempOpe);            }        }    }    public int getUserMachine_Act() {        return userMachine_Act;    }   public int getUserEquipment_Act() {        return userEquipment_Act;    }    public int getUserMachine_Available() {        return userMachine_Available;    }    public int getUserMachine_Broken() {        return userMachine_Broken;    }    public int getUserEquipment_Available() {        return userEquipment_Available;    }    public int getUserEquipment_Broken() {        return userEquipment_Broken;    }    public int getUserMachine_Busy() {        return userMachine_Busy;    }    public int getUserEquipment_Busy() {        return userEquipment_Busy;    }    public int getUserMachine_Idle() {        return userMachine_Idle;    }    public int getUserEquipment_Idle() {        return userEquipment_Idle;    }       public void updateUserMachineEquipment(){        userMachine_Act = 0;        userEquipment_Act = 0;        userMachine_Available = 0;        userMachine_Broken = 0;        userMachine_Busy = 0;        userMachine_Idle = 0;        userEquipment_Available = 0;        userEquipment_Broken = 0;        userEquipment_Busy = 0;        userEquipment_Idle = 0;        for (E_Machine tempMachine : mapUserMachineByOperation.values()){            if (tempMachine.getMachineState().equals(ObjectState.Active)){                userMachine_Act++;//                if (tempMachine.getStatus().equals(Status.Broken))//                    userMachine_Broken++;//                else{//                    userMachine_Available++;//                    if (tempMachine.getStatus().equals(Status.Busy))//                        userMachine_Busy++;//                }                if (tempMachine.getStatus().equals(Status.Busy)) {                    userMachine_Busy++;                }                else                if (tempMachine.getStatus().equals(Status.Idle)) {                    userMachine_Idle++;                }            }        }        for (E_Machine tempMachine : mapUserMachineByTransport.values()){            if (tempMachine.getMachineState().equals(ObjectState.Active)){                userEquipment_Act++;//                if (tempMachine.getStatus().equals(Status.Broken))//                    userEquipment_Broken++;//                else{//                    userEquipment_Available++;//                    if (tempMachine.getStatus().equals(Status.Busy))//                        userEquipment_Busy++;//                }                if (tempMachine.getStatus().equals(Status.Busy)) {                    userEquipment_Busy++;                }                else                if (tempMachine.getStatus().equals(Status.Idle)) {                    userEquipment_Idle++;                }            }                        }    }    public E_Station getUserStation_MachineZone() {        if (userStation_MachineZone == null){            for (E_Station station : getMapUserStation().values()){                if (station.getStationType().equals(StationType.MachineZone)){                    userStation_MachineZone = station;                    break;                }            }        }        return userStation_MachineZone;    }    public E_Station getUserStation_StaffZone() {        if (mapUserStation == null) {            return null;        }        if (userStation_StaffZone == null){            for (E_Station station : getMapUserStation().values()){                if (station.getStationType().equals(StationType.StaffZone)){                    userStation_StaffZone = station;                    break;                }            }        }        return userStation_StaffZone;    }       public E_Player getPlayer() {        return currentPlayer;    }    public void setPlayer(E_Player newCurrentPlayer) {        currentPlayer = newCurrentPlayer;    }    public void setGameEngine(GameEngine game){        this.gameEngine = game;    }        public String getNextOrderDueDate(){        if (newNextOrderDueDate > 0){            nextOrderDueDate = newNextOrderDueDate;            newNextOrderDueDate = -1;            return convertTimeUnitsToString(nextOrderDueDate);        }else        if (nextOrderDueDate > -1 && nextOrderDueDate < Integer.MAX_VALUE){            return convertTimeUnitsToString(nextOrderDueDate);        }else{            nextOrderDueDate = Integer.MAX_VALUE;            return "-";        }    }    public void setNextOrderDueDate(int nextOrderDueDate) {        this.nextOrderDueDate = nextOrderDueDate;    }        public void updateTimeOrders(){        Random rnd = new Random();        double tempCurrentTime = getCurrentTimeWithFactor();        for (E_Order order : getMapOrder().values()){            System.out.print("InitialTimes:" + tempCurrentTime);            double resultRandomTime = getRandomOrderTime(rnd, order.getPercentageVariabilityMin(), order.getPercentageVariabilityMax());            System.out.print(" - RandomTimes:" + resultRandomTime);            tempCurrentTime = tempCurrentTime + order.getTimeToAppear()*resultRandomTime;            order.setTime(tempCurrentTime);            System.out.println(" - TimeToAppear:" + tempCurrentTime + " - Duration:" + order.getTimeUnits());        }        arrOrders = new ArrayList<>(getMapOrder().values());        currentOrderIndex = 0;        nextOrderDueDate = Integer.MAX_VALUE;        newNextOrderDueDate = -1;    }        public E_Order getNextOrder(E_Order tempOrder){        if (tempOrder.getTime() + tempOrder.getTimeUnits() < getCurrentTimeWithFactor()){            tempOrder.setState(OrderStates.Fail);            updateOrderControlData();            return getNextOrder();        }        return tempOrder;    }        public E_Order getNextOrder(){        if (currentOrderIndex < arrOrders.size()) {            switch (arrOrders.get(currentOrderIndex).getState()){                case Wait:                    if (arrOrders.get(currentOrderIndex).getTime() > getCurrentTimeWithFactor()){                        return null;                    }else{                        updateOrderControlData();                        if (arrOrders.get(currentOrderIndex).getTime() + arrOrders.get(currentOrderIndex).getTimeUnits() < getCurrentTimeWithFactor()){                            arrOrders.get(currentOrderIndex).setState(OrderStates.Fail);                            return getNextOrder();                        }else{                            arrOrders.get(currentOrderIndex).setState(OrderStates.Assigned);                            newNextOrderDueDate = arrOrders.get(currentOrderIndex).getTimeUnits() - 1;                            gameEngine.getGeneralScreenController().setNextDueDate(getNextOrderDueDate());                            return arrOrders.get(currentOrderIndex);                        }                                                }                case Assigned:                case Done:                case Fail:                case Working:                    currentOrderIndex++;                    return getNextOrder();                default:                    return null;            }        }        else {            return null;        }    }       public int existsWaitOrderByRequiredPart(int idRequiredPart){        int numberRequiredParts = Integer.MAX_VALUE;        for (E_Order tempOrder : arrOrders){            if ((tempOrder.getState().equals(OrderStates.Wait) || tempOrder.getState().equals(OrderStates.Assigned))                 && tempOrder.getIdPart() == idRequiredPart && getCurrentTimeWithFactor() >= tempOrder.getTime()){               if (tempOrder.getQuantity() < numberRequiredParts) {                        numberRequiredParts = tempOrder.getQuantity();                    }            }        }        return numberRequiredParts == Integer.MAX_VALUE ? -1 : numberRequiredParts;    }        public void updateOrderControlData(){//        if (gameEngine.getNifty().getScreen("layerScreen").findElementByName("winOrC_Element").getControl(OrderControl.class).isIsVisible())            gameEngine.getNifty().getScreen("layerScreen").findElementByName("winOrC_Element").getControl(OrderControl.class).updateData();    }            private double getRandomOrderTime(Random rnd, double percentageMin, double percentageMax){        if (percentageMin >= percentageMax) {            return 0;        }        else {            return (((double)(rnd.nextInt((int)((percentageMax-percentageMin)*100.0)))/100.0)+percentageMin)/100.0;        }    }        public E_Machine getNearestMachineTo(String machineCategory, int locationX, int locationZ){        int intDistance = Integer.MAX_VALUE;        E_Machine nearestMachine = null;//        Path path;        double distance;        for (E_Machine tempMachine : mapUserMachine.values()){            if (//(tempMachine.getStatus() == Status.Idle || tempMachine.getStatus() == Status.Broken)                     tempMachine.getStatus() == Status.Idle                    && tempMachine.getMachineCategory().toString().equals(machineCategory)                    && tempMachine.getMachineState() == ObjectState.Active){                distance = (Math.sqrt(Math.pow(locationX - tempMachine.getCurrentLocationX(),2) + Math.pow(locationZ - tempMachine.getCurrentLocationZ(),2))*100)/100;                if (distance <= intDistance){                    intDistance = (int)distance;                    nearestMachine = tempMachine;                }           }        }        return nearestMachine;    }       public E_Machine getFreeMachine(String machineCategory, TypeActivity typeActivity){       E_Machine freeMachine = null;        int idStationMachineZone = -1;        if (typeActivity.equals(TypeActivity.Operation)){            for (E_Station tempStation : getMapUserStation().values()){                if (tempStation.getStationType().equals(StationType.MachineZone)){                    idStationMachineZone = tempStation.getIdStation();                    break;                }            }        }        for (E_Machine tempMachine : mapUserMachine.values()){            if ((tempMachine.getStatus() == Status.Idle || tempMachine.getStatus() == Status.Broken) && tempMachine.getMachineCategory().toString().equals(machineCategory)                    && tempMachine.getMachineState() == ObjectState.Active){                if (typeActivity.equals(TypeActivity.Operation)){                    if (tempMachine.getVirtualIdLocation().contains(TypeElements.STATION.toString())){                        if (tempMachine.getVirtualIdLocation().replace(TypeElements.STATION.toString(), "").equals(String.valueOf(idStationMachineZone))){                            freeMachine = tempMachine;                            break;                        }                                            }                }else{                    freeMachine = tempMachine;                    break;                }            }        }        return freeMachine;    }        public E_Operator getNearestCarrierOperatorTo(int locationX, int locationZ){        int intDistance = Integer.MAX_VALUE;        E_Operator nearestOperator = null;        double distance;        updateUserOperatorCategories();        for (E_Operator tempOpe : mapUserOperatorCarrier.values()){            if (tempOpe.getStatus() == Status.Idle && tempOpe.getState() == ObjectState.Active){                distance = (Math.sqrt(Math.pow(locationX - tempOpe.getCurrentLocationX(),2) + Math.pow(locationZ - tempOpe.getCurrentLocationZ(),2))*100)/100;                if (distance <= intDistance){                    intDistance = (int)distance;                    nearestOperator = tempOpe;                }            }        }        return nearestOperator;    }        public E_Operator getNearestOperatorTo(ArrayList<Integer> arrIdOperators, int locationX, int locationZ){        int intDistance = Integer.MAX_VALUE;        E_Operator nearestOperator = null;//        Path path;        double distance;        for (E_Operator tempOpe : mapUserOperator.values()){            if (tempOpe.getStatus() == Status.Idle && arrIdOperators.contains(tempOpe.getIdOperator()) && tempOpe.getState() == ObjectState.Active){//                path = gameEngine.getPathFinder().findPath(tempOpe.getCurrentLocationX(), tempOpe.getCurrentLocationZ(), locationX, locationZ);//                if (path != null){//                    if (path.getLength() <= intDistance){//                        intDistance = path.getLength();//                        nearestOperator = tempOpe;//                    }    //                }else{//                    nearestOperator = tempOpe;//                    break;//                }                distance = (Math.sqrt(Math.pow(locationX - tempOpe.getCurrentLocationX(),2) + Math.pow(locationZ - tempOpe.getCurrentLocationZ(),2))*100)/100;                if (distance <= intDistance){                    intDistance = (int)distance;                    nearestOperator = tempOpe;                }            }        }        return nearestOperator;    }        public ArrayList<Integer> getOperatorsSkilled(ArrayList<Integer> arrSkillsRequired, Map<Integer, E_Operator> arrAssignedOperators)    {        ArrayList<Integer> arrTemp = new ArrayList<>();        boolean isSkilled = false;        for (E_Operator tempOpe : mapUserOperator.values()){            for (Integer tempSkill : arrSkillsRequired){                isSkilled = false;                for (Pair<Integer,Double> tempPair : tempOpe.getArrSkills()){                    if (tempPair.getFirst().equals(tempSkill)){                        isSkilled = true;                        break;                    }                }                if (!isSkilled) {                    break;                }            }            if (isSkilled) {                arrTemp.add(tempOpe.getIdOperator());            }        }        ArrayList<Integer> arrNewTemp = new ArrayList<>();        if (arrAssignedOperators == null || arrAssignedOperators.isEmpty()){            for (Integer indexOpe : arrTemp){                if (getMapUserOperator().get(indexOpe).getArrActivitiesAssigned().isEmpty()) {                    arrNewTemp.add(indexOpe);                }            }        }else{            for (Integer indexOpe : arrTemp){                if (arrAssignedOperators.containsKey(indexOpe)) {                    arrNewTemp.add(indexOpe);                }            }        }        return arrNewTemp;    }        public void playPauseElements(Status status)    {        for (E_Operator tempOpe : mapUserOperator.values()){            if (tempOpe.getMotionControl() != null){                if (status.equals(Status.Busy)){                    tempOpe.playStopAnimation(true);                    if (tempOpe.getMotionControl() != null) {                        tempOpe.getMotionControl().play();                    }                    tempOpe.updatePhysicsLocation();                }else{                    tempOpe.playStopAnimation(false);                    if (tempOpe.getMotionControl() != null) {                        tempOpe.getMotionControl().pause();                    }                    tempOpe.updatePhysicsLocation();                }            }        }        for (E_Machine tempMachine : mapUserMachine.values()){            if (status.equals(Status.Busy)){                if (tempMachine.isMachineIsAdding()) {                    tempMachine.addItemsDynamically(true,0,0);                }                if (tempMachine.isMachineIsRemoving()) {                    tempMachine.removeItemsDynamically(true,0,0);                }            }else{                if (tempMachine.isMachineIsAdding()){                    tempMachine.addItemsDynamically(false,0,0);                    tempMachine.setMachineIsAdding(true);                }                if (tempMachine.isMachineIsRemoving()){                    tempMachine.removeItemsDynamically(false,0,0);                    tempMachine.setMachineIsRemoving(true);                }            }        }    }        public void updateSpeedElements()    {        if (mapUserOperator == null) {            return;        }        for (E_Operator tempOpe : mapUserOperator.values()){            if (tempOpe.getStatus().equals(Status.Busy)){                if (tempOpe.getMotionControl() != null){                    tempOpe.getMotionControl().setSpeed((float)tempOpe.getTempSpeed()*gameEngine.getGeneralScreenController().getTimeFactorForSpeed());                    tempOpe.getAnimationChannel().setSpeed(gameEngine.getGeneralScreenController().getTimeFactorForSpeed());                }//                System.out.println("UpdateSpeedElements BUSY-Operator:" + tempOpe.getIdOperator() + " - Machine:" + tempOpe.getIdMachineAttached() + " - Activity:" + tempOpe.getIdStrategyAssigned());            }        }    }        public boolean updateLocalDB(){        Params.percentageLoading = 0.0f;        ProgressBarController pbc = gameEngine.getNifty().getScreen("initialMenu").findControl("imageBorder",ProgressBarController.class);        Label updatingLabel = gameEngine.getNifty().getScreen("initialMenu").findNiftyControl("updatingElement", Label.class);        InitialMenuController imc = gameEngine.getNifty().getScreen("initialMenu").findControl("dialogInitialMenu",InitialMenuController.class);        pbc.setProgress(Params.percentageLoading);        //read & compare ToUpdate table. then execute what it is necessary        DataLoading dataLoading = new DataLoading();        dataLoading.setPbc(pbc);        dataLoading.setUpdatingLabel(updatingLabel);        dataLoading.setImc(imc);        dataLoading.start();        return true;    }        public void loginPlayer(String email, String password){        ProgressBarController pbc = gameEngine.getNifty().getScreen("initialMenu").findControl("imageBorder",ProgressBarController.class);        Label updatingLabel = gameEngine.getNifty().getScreen("initialMenu").findNiftyControl("updatingElement", Label.class);        InitialMenuController imc = gameEngine.getNifty().getScreen("initialMenu").findControl("dialogInitialMenu",InitialMenuController.class);        UserDataLoading userDataLoading = new UserDataLoading();        userDataLoading.setEmail(email);        userDataLoading.setPassword(password);        userDataLoading.setCurrentPlayer(currentPlayer);        userDataLoading.setPbc(pbc);        userDataLoading.setUpdatingLabel(updatingLabel);        userDataLoading.setImc(imc);        userDataLoading.setGameData(this);        userDataLoading.start();    }}